@page "/trains-page"

@using KolodvorApp.Client.Components;
@using KolodvorApp.Client.HttpServices;
@using KolodvorApp.Shared.DTOs;

@inject ITrainService _trainService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<style>
    .mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0;
    }

    .mud-input.mud-input-underline:before {
        border-bottom: 1px, solid, var(--white);
    }

    .search .mud-icon-root.mud-svg-icon {
        fill: var(--white);
    }
</style>

<MudText Typo="Typo.h4" Style="color: var(--primary-color)">@localizer["PAGE_TITLE_TRAIN_OVERVIEW"]</MudText>
<br />

<MudTooltip Text=@localizer["ADD_TRAIN"]>
    <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="AddNewTrain">
        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.Add" />
        <span class="ml-2" style="white-space: nowrap">@localizer["ADD"]</span>
    </MudButton>
</MudTooltip>
<br />
<br />

<MudTable Items="trainList" FixedHeader="true" Striped="true" Hover="true" Dense="true" Virtualize="true" Breakpoint="Breakpoint.Sm" Filter="new Func<TrainDto, bool>(FilterFunc)">
    <ColGroup>
        <col style="width: 20%;" />
        <col style="width: 20%;" />
        <col style="width: 40%;" />
    </ColGroup>

    <HeaderContent>
        <MudTh Style="background-color: var(--primary-color); color: var(--white);">
            <MudTableSortLabel SortBy="new Func<TrainDto, object>(x => x.Tag)">@localizer["TABLE_TRAIN_TAG"]</MudTableSortLabel>
        </MudTh>
        <MudTh Style="background-color: var(--primary-color); color: var(--white);">
            <MudTableSortLabel SortBy="new Func<TrainDto, object>(x => x.Capacity)">@localizer["TABLE_CAPACITY"]</MudTableSortLabel>
        </MudTh>
        <MudTh Style="background-color: var(--primary-color); color: var(--white); font-weight: 600;">@localizer["TABLE_CATEGORIES"]</MudTh>
        <MudTh Style="background-color: var(--primary-color)">
            <MudFocusTrap Class="search">
                <MudTextField Style="color: var(--white); font-weight: 600;" @bind-Value="_searchString" Immediate="true" Clearable="true" Placeholder=@localizer["SEARCH_PLACEHOLDER"] Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0" />
            </MudFocusTrap>
        </MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd Style="font-size: 16px">@context.Tag</MudTd>
        <MudTd Style="font-size: 16px">@context.Capacity</MudTd>
        <MudTd>@IconDisplay(context.Categories)</MudTd>
        <MudTd Class="mr-3" Style="text-align: right">
            <MudButtonGroup Variant="Variant.Filled" OverrideStyles="false">
                <MudTooltip Text=@localizer["OPEN_TRAIN_DETAILS"]>
                    <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="@((e) => OpenTrainDetail(context))">
                        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.OpenInNew" />
                        <span class="ml-3" style="white-space: nowrap">@localizer["OPEN_DETAIL"]</span>
                    </MudButton>
                </MudTooltip>
                <MudTooltip Text=@localizer["UPDATE_TRAIN"]>
                    <MudButton Variant="Variant.Filled" Class="btn-warning" OnClick="@((e) => UpdateTrain(context))">
                        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.Update" />
                        <span class="ml-3" style="white-space: nowrap">@localizer["UPDATE"]</span>
                    </MudButton>
                </MudTooltip>
                <MudTooltip Text=@localizer["DELETE_BUTTON"]>
                    <MudButton Variant="Variant.Filled" Class="btn-error" OnClick="@((e) => Delete(context))">
                        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.Delete" />
                        <span class="ml-3" style="white-space: nowrap">@localizer["DELETE"]</span>
                    </MudButton>
                </MudTooltip>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10 }" />
    </PagerContent>
</MudTable>

@code {

    #region General Summary

    private List<TrainDto> trainList = new();

    private List<TrainCategoryDto> trainCategoriesList = new();

    #endregion

    private Dictionary<string, object> categoryIconMapping = new()
    {
        { "Vagoni drugog razreda", Icons.Material.Filled.LooksTwo },
        { "Vagoni prvog razreda", Icons.Material.Filled.LooksOne },
        { "Vagoni za prijevoz bicikla", Icons.Material.Filled.PedalBike },
        { "Putnički vlak", Icons.Material.Filled.Train },
        { "Brzi vlak", Icons.Material.Filled.DirectionsRailway },
        { "Vagon s mjestima za osobe s invaliditetom", Icons.Material.Filled.Accessible }
    };

    private string? _searchString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        trainList = await _trainService.GetAll();
        trainCategoriesList = await _trainService.GetAllCategories();
    }

    private bool FilterFunc(TrainDto element) => FilterFunction(element, _searchString);

    private bool FilterFunction(TrainDto element, string? searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            element.Tag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private RenderFragment IconDisplay(List<ContainsDto> categories) => builder =>
    {
        int seq = 0;
        foreach (var category in categories)
        {
            builder.OpenComponent<MudTooltip>(seq++);
            builder.AddAttribute(seq++, "Text", category.TrainCategory!.Name);
            builder.AddAttribute(seq++, "ChildContent", new RenderFragment(b =>
            {
                int nestedSeq = 0;
                if (categoryIconMapping.TryGetValue(category.TrainCategory.Name, out var icon))
                {
                    b.OpenComponent<MudIcon>(nestedSeq++);
                    b.AddAttribute(nestedSeq++, "Style", "fill: var(--secondary-color); margin-right: 1.5em;");
                    b.AddAttribute(nestedSeq++, "Icon", icon);
                    b.CloseComponent();
                }
            }));
            builder.CloseComponent();
        }
    };

    private async Task AddNewTrain()
    {
        var parameters = new DialogParameters();
        parameters.Add("TrainCategories", trainCategoriesList);

        var result = await TrainAddOrUpdateDialog(parameters);
        if (result is not null)
        {
            trainList.Add(result);
            StateHasChanged();
        }
    }

    private async Task UpdateTrain(TrainDto train)
    {
        var selectedCategories = trainCategoriesList
                .Where(category => train.Categories.Any(cat => cat.TrainCategoryId == category.Id))
                .ToList();

        var parameters = new DialogParameters();
        parameters.Add("TrainCategories", trainCategoriesList);
        parameters.Add("SelectedCategories", selectedCategories);
        parameters.Add("Model", train);

        var result = await TrainAddOrUpdateDialog(parameters);
        if (result is not null)
        {
            trainList.Remove(train);
            trainList.Add(result);
            StateHasChanged();
        }
    }

    private async Task<TrainDto> TrainAddOrUpdateDialog(DialogParameters parameters)
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = _dialogService.Show<TrainCreateDialog>("", parameters, options);
        return (TrainDto)(await dialog.Result).Data;
    }

    private async Task OpenTrainDetail(TrainDto train)
    {
        var previewTrain = await _trainService.GetTrainByIdWithMaintenances(train.Id!.Value);
        var parameters = new DialogParameters();
        parameters.Add("TrainData", previewTrain);

        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = _dialogService.Show<TrainDetailDialog>("", parameters, options);
        var result = await dialog.Result;
    }

    private async Task Delete(TrainDto train)
    {
        var parameters = new DialogParameters { ["Message"] = localizer["ARE_YOU_SURE"] + $""" "{train.Tag}"? """ };

        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = _dialogService.Show<AreYouSureDialog>("", parameters, options);
        var result = (await dialog.Result).Data;

        if (result is null) return;

        var response = await _trainService.DeleteTrain(train.Id!.Value);

        if (response.IsSuccessStatusCode)
        {
            _snackbar.Add(localizer["TRAIN_SUCCESSFUL_UPDATED"], Severity.Success);
            trainList.Remove(train);
            StateHasChanged();
        }
        else _snackbar.Add(localizer["SERVER_PROBLEMS"], Severity.Warning);
    }
}