@page "/login"

@using KolodvorApp.Client.HttpServices
@using KolodvorApp.Shared.DTOs

@inject IUserService _userService
@inject ILocalStorageService _localStorage
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<MudContainer Style="height: 100vh; display: flex; justify-content: center; align-items: center;">
    <EditForm Model="_model">
        <MudPaper Width="auto" Class="pa-5">
            <MudText Typo="Typo.h5" Style="color: var(--primary-color)">@localizer["LOGIN_TITLE"]</MudText>
            <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_EMAIL_OR_NAME"]</span>
            <MudTextField T="string"
                          Required="true"
                          RequiredError=@localizer["REQUIRED_EMAIL_OR_NAME"]
                          Variant="Variant.Outlined"
                          @bind-Value="_model.EmailOrUsername" />
            <br />
            <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_PASSWORD"]</span>
            <MudTextField T="string"
                          Required="true"
                          RequiredError=@localizer["REQUIRED_PASSWORD"]
                          InputType="InputType.Password"
                          Variant="Variant.Outlined"
                          @bind-Value="_model.Password" />
            <br />
            <MudButton Class="btn-primary mt-2" Variant="Variant.Filled" FullWidth="true" OnClick="Submit" Disabled=@Validate()>@localizer["SUBMIT"]</MudButton>
        </MudPaper>
    </EditForm>
</MudContainer>

@code {
    [CascadingParameter]
    protected CascadingAppState AppState { get; set; }

    private LoginUserDto _model = new();

    private bool Validate()
    {
        if (string.IsNullOrWhiteSpace(_model.EmailOrUsername)) return true;
        if (string.IsNullOrWhiteSpace(_model.Password)) return true;
        return false;
    }

    private async Task Submit()
    {
        var response = await _userService.Login(_model);

        if (response.IsSuccessStatusCode)
        {
            _snackbar.Add(localizer["USER_SUCCESSFUL_LOGIN"], Severity.Success);
            var content = await response.Content.ReadFromJsonAsync<LoggedUserDto>();
            await _localStorage.SetItemAsync("authToken", content!.JwtToken);
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            AppState.Init(content);
            _navigationManager.NavigateTo("/");
        }
        else
        {
            _snackbar.Add(localizer["SERVER_PROBLEMS"], Severity.Warning);
        }
    }
}