@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <div class="mr-5">
            <MudTooltip Text=@localizer["LOGIN_BUTTON"]>
                <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="ToLogin">
                    <span style="white-space: nowrap">@localizer["LOGIN_BUTTON"]</span>
                </MudButton>
            </MudTooltip>
        </div>

        <MudTooltip Text=@localizer["REGISTRATION_BUTTON"]>
            <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="ToRegistration">
                <span style="white-space: nowrap">@localizer["REGISTRATION_BUTTON"]</span>
            </MudButton>
        </MudTooltip>
    </NotAuthorized>
    <Authorized>
        <MudText Typo="Typo.h5" Class="mr-5" Style="color: var(--primary-color)">@localizer["HELLO_MESSAGE"] @AppState.LoggedInUser.Name</MudText>

        <MudTooltip Text=@localizer["LOGOUT_BUTTON"]>
            <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="Logout">
                <span style="white-space: nowrap">@localizer["LOGOUT_BUTTON"]</span>
            </MudButton>
        </MudTooltip>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    protected CascadingAppState AppState { get; set; }

    private void ToLogin() => _navigationManager.NavigateTo("/login");

    private void ToRegistration() => _navigationManager.NavigateTo("/registration");

    private async Task Logout()
    {
        await _localStorage.RemoveItemAsync("authToken");
        await _authenticationStateProvider.GetAuthenticationStateAsync();
        _navigationManager.NavigateTo("");
    }
}