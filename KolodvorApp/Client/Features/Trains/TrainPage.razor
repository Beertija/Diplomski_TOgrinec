@page "/trains-page"

@attribute [Authorize]

@using KolodvorApp.Client.Features.Trains.Components
@using KolodvorApp.Client.HttpServices
@using KolodvorApp.Shared.DTOs

@inject ITrainService _trainService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<style>
    .mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0;
    }

    .mud-input.mud-input-underline:before {
        border-bottom: 1px, solid, var(--white);
    }

    .search .mud-icon-root.mud-svg-icon {
        fill: var(--white);
    }
</style>

<MudText Typo="Typo.h4" Style="color: var(--primary-color)">@localizer["PAGE_TITLE_TRAIN_OVERVIEW"]</MudText>
<br />

<MudTooltip Text=@localizer["ADD_TRAIN"]>
    <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="AddNewTrain">
        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.Add" />
        <span class="ml-2" style="white-space: nowrap">@localizer["ADD"]</span>
    </MudButton>
</MudTooltip>
<br />
<br />

<TrainsTable TrainList="_trainList" OpenTrainDetail="OpenTrainDetail" UpdateTrain="UpdateTrain" DeleteTrain="DeleteTrain" />

@code {

    #region General Summary

    private List<TrainDto> _trainList = new();

    private List<TrainCategoryDto> _trainCategoriesList = new();

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _trainList = await _trainService.GetAll();
        _trainCategoriesList = await _trainService.GetAllCategories();
    }

    private async Task OpenTrainDetail(TrainDto train)
    {
        var previewTrain = await _trainService.GetTrainByIdWithMaintenances(train.Id!.Value);
        var parameters = new DialogParameters();
        parameters.Add("TrainData", previewTrain);

        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = _dialogService.Show<TrainDetailDialog>("", parameters, options);
        var result = await dialog.Result;
    }

    private async Task AddNewTrain()
    {
        var parameters = new DialogParameters();
        parameters.Add("TrainCategories", _trainCategoriesList);

        var result = await TrainAddOrUpdateDialog(parameters);
        if (result is not null)
        {
            _trainList.Add(result);
            StateHasChanged();
        }
    }

    private async Task UpdateTrain(TrainDto train)
    {
        var parameters = new DialogParameters();
        parameters.Add("TrainCategories", _trainCategoriesList);
        parameters.Add("Model", train);

        var result = await TrainAddOrUpdateDialog(parameters);
        if (result is not null)
        {
            _trainList.Remove(train);
            _trainList.Add(result);
            StateHasChanged();
        }
    }

    private async Task<TrainDto> TrainAddOrUpdateDialog(DialogParameters parameters)
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = _dialogService.Show<TrainCreateDialog>("", parameters, options);
        return (TrainDto)(await dialog.Result).Data;
    }

    private async Task DeleteTrain(TrainDto train)
    {
        var parameters = new DialogParameters { ["Message"] = localizer["ARE_YOU_SURE"] + $""" "{train.Tag}"? """ };

        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = _dialogService.Show<AreYouSureDialog>("", parameters, options);
        var result = (await dialog.Result).Data;

        if (result is null) return;

        var response = await _trainService.DeleteTrain(train.Id!.Value);

        if (response.IsSuccessStatusCode)
        {
            _snackbar.Add(localizer["TRAIN_SUCCESSFUL_DELETED"], Severity.Success);
            _trainList.Remove(train);
            StateHasChanged();
        }
        else _snackbar.Add(localizer["SERVER_PROBLEMS"], Severity.Warning);
    }
}