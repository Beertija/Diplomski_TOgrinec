@using KolodvorApp.Client.HttpServices
@using KolodvorApp.Shared.DTOs
@using System.Net

@inject ITrainService _trainService
@inject ISnackbar _snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Style="color: var(--primary-color)">@(_isUpdate ? $"{localizer["UPDATE_TRAIN"]} {Model!.Tag}" : localizer["ADD_TRAIN"])</MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="Model">
                <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_TAG"]</span>
                <MudTextField T="string"
                          InputType="InputType.Number"
                          Required="true"
                          RequiredError=@localizer["REQURED_TAG"]
                          Variant="Variant.Outlined"
                          @bind-Value="Model!.Tag" />
                <br />
                <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_CAPACITY"]</span>
                <MudNumericField T="int"
                             Min="0"
                             HideSpinButtons="true"
                             Variant="Variant.Outlined"
                             @bind-Value="Model.Capacity" />
                <br />
                <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_CATEGORIES"]</span>
                <MudSelect T="TrainCategoryDto"
                       MultiSelection="true"
                       @bind-SelectedValues="_selectedCategories"
                       Placeholder=@localizer["PLACEHOLDER_CATEGORIES"]
                       Required="true"
                       RequiredError=@localizer["REQURED_CATEGORIES"]
                       AnchorOrigin="Origin.BottomCenter">
                    @foreach (var category in TrainCategories)
                {
                    <MudSelectItem Value="category">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <br />
            <MudButton OnClick="Cancel">@localizer["CANCEL"]</MudButton>
            <MudButton Class="btn-primary" Variant="Variant.Filled" OnClick="Submit" Disabled=@Validate()>@localizer["SUBMIT"]</MudButton>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    [Parameter, EditorRequired]
    public List<TrainCategoryDto> TrainCategories { get; init; } = new();

    [Parameter]
    public TrainDto? Model { get; set; }

    private IEnumerable<TrainCategoryDto> _selectedCategories { get; set; } = new HashSet<TrainCategoryDto>();

    private bool _isUpdate = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Model is not null)
        {
            _isUpdate = true;
            _selectedCategories = TrainCategories
            .Where(category => Model.Categories.Any(cat => cat.TrainCategoryId == category.Id))
            .ToList();
        }
        else
        {
            Model = new();
        }
    }

    private bool Validate() => string.IsNullOrWhiteSpace(Model!.Tag);

    private void Cancel() => MudDialog!.Cancel();

    private async Task Submit()
    {
        Model!.Categories = _selectedCategories.Select(category => new ContainsDto()
            {
                TrainCategoryId = category.Id!.Value
            }).ToList();

        var response = await _trainService.CreateOrUpdateTrain(Model);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<TrainDto>();
            if (_isUpdate) _snackbar.Add(localizer["TRAIN_SUCCESSFUL_UPDATED"], Severity.Success);
            else _snackbar.Add(localizer["TRAIN_SUCCESSFUL_CREATED"], Severity.Success);
            MudDialog!.Close(content);
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _snackbar.Add(errorMessage, Severity.Warning);
        }
        else
        {
            _snackbar.Add(localizer["SERVER_PROBLEMS"], Severity.Error);
        }
    }
}
