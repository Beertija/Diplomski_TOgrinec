@page "/routes-page"

@attribute [Authorize]

@using KolodvorApp.Client.Features.Routes.Components
@using KolodvorApp.Client.HttpServices
@using KolodvorApp.Shared.DTOs

@inject IRouteService _routeService
@inject IStationService _stationService
@inject ITrainService _trainService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudText Typo="Typo.h4" Style="color: var(--primary-color)">@localizer["PAGE_TITLE_ROUTE_OVERVIEW"]</MudText>
<br />

<MudTooltip Text=@localizer["ADD_ROUTE"]>
    <MudButton Variant="Variant.Filled" Class="btn-primary" OnClick="AddNewRoute">
        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.Add" />
        <span class="ml-2" style="white-space: nowrap">@localizer["ADD"]</span>
    </MudButton>
</MudTooltip>
<br />
<br />

<RoutesTable RouteList="_routeList" UpdateRoute="UpdateRoute" DeleteRoute="DeleteRoute" />

@code {

    #region General Summary

    private List<RouteDto> _routeList = new();

    private List<StationDto> _stationsList = new();

    private List<TrainSelectorDto> _trainsList = new();

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _routeList = await _routeService.GetAll();
        _stationsList = await _stationService.GetAll();
        _trainsList = await _trainService.GetAllTrainsForSelect();
    }

    private async Task AddNewRoute()
    {
        var parameters = new DialogParameters();
        parameters.Add("TrainsList", _trainsList);
        parameters.Add("StationsList", _stationsList);

        var result = await RouteAddOrUpdateDialog(parameters);
        if (result is not null)
        {
            _routeList.Add(result);
            StateHasChanged();
        }
    }

    private async Task<RouteDto> RouteAddOrUpdateDialog(DialogParameters parameters)
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = _dialogService.Show<RouteCreateDialog>("", parameters, options);
        return (RouteDto)(await dialog.Result).Data;
    }

    private async Task UpdateRoute(RouteDto route)
    {
        var parameters = new DialogParameters();
        parameters.Add("TrainsList", _trainsList);
        parameters.Add("StationsList", _stationsList);
        parameters.Add("Model", route);

        var result = await RouteAddOrUpdateDialog(parameters);
        if (result is not null)
        {
            _routeList.Remove(route);
            _routeList.Add(result);
            StateHasChanged();
        }
    }

    private async Task DeleteRoute(RouteDto route)
    {
        var parameters = new DialogParameters { ["Message"] = localizer["ARE_YOU_SURE"] + $""" "{route.StartStation}-{route.EndStation}"? """ };

        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = _dialogService.Show<AreYouSureDialog>("", parameters, options);
        var result = (await dialog.Result).Data;

        if (result is null) return;

        var response = await _routeService.DeleteRoute(route.Id!.Value);

        if (response.IsSuccessStatusCode)
        {
            _snackbar.Add(localizer["ROUTE_SUCCESSFUL_DELETED"], Severity.Success);
            _routeList.Remove(route);
            StateHasChanged();
        }
        else _snackbar.Add(localizer["SERVER_PROBLEMS"], Severity.Warning);
    }
}