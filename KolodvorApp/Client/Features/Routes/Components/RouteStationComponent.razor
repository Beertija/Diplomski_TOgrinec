@using KolodvorApp.Client.Features.Routes.Models
@using KolodvorApp.Shared.DTOs

<MudCard Outlined="true" Style="border: 2px solid var(--primary-color)" Class="mb-1">
    <MudCardContent>
        <EditForm Model="Model">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <div style="display: flex; justify-content: space-between;">
                        <div style="margin-right: 80px">
                            <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_START_STATION"]</span>
                            <MudAutocomplete T="StationDto"
                                             @bind-Value="Model.StartStation"
                                             Placeholder=@localizer["START_STATION"]
                                             AnchorOrigin="Origin.BottomCenter"
                                             SearchFunc="SortStations"
                                             ToStringFunc="@(x => x == null ? null : $"{x.Name}")"
                                             MaxItems="null" />

                            <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_DEPARTURE_TIME"]</span>
                            <MudTimePicker Editable="true"
                                           @bind-Time="Model.StartTime" />
                        </div>

                        <div>
                            <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_END_STATION"]</span>
                            <MudAutocomplete T="StationDto"
                                             @bind-Value="Model.EndStation"
                                             Placeholder=@localizer["END_STATION"]
                                             AnchorOrigin="Origin.BottomCenter"
                                             SearchFunc="SortStations"
                                             ToStringFunc="@(x => x == null ? null : $"{x.Name}")"
                                             MaxItems="null" />

                            <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_ARRIVAL_TIME"]</span>
                            <MudTimePicker Editable="true"
                                           @bind-Time="Model.EndTime" />
                        </div>
                    </div>
                </div>
                <div style="display: block  ">
                    <span style="font-weight: 600; color: var(--secondary-color);">@localizer["INPUT_COST"]</span>
                    <MudNumericField T="decimal"
                                     Min="0"
                                     Format="F2"
                                     HideSpinButtons="true"
                                     Adornment="Adornment.Start"
                                     AdornmentText="EUR "
                                     Variant="Variant.Outlined"
                                     @bind-Value="Model.Cost" />
                </div>

                <MudTooltip Text=@localizer["DELETE_BUTTON"]>
                    <MudButton Variant="Variant.Filled" Class="btn-error" OnClick="OnDeleteRouteStation">
                        <MudIcon Style="color: var(--white)" Icon="@Icons.Material.Filled.Delete" />
                        <span class="ml-3" style="white-space: nowrap">@localizer["DELETE"]</span>
                    </MudButton>
                </MudTooltip>
            </div>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public List<StationDto> StationsList { get; set; } = new();

    [Parameter, EditorRequired]
    public RouteStationModel Model { get; set; } = new();

    [Parameter]
    public EventCallback<RouteStationModel> OnDelete { get; set; }

    private async Task<IEnumerable<StationDto>> SortStations(string value)
    {
        if (string.IsNullOrEmpty(value))
            return StationsList;
        else
            return StationsList.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }

    private async Task OnDeleteRouteStation() => await OnDelete.InvokeAsync(Model);
}